{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Containerised R Development Environment The containerized development environment for R is a Google Summer of Code 2023 project. Our aim is to provide a standard environment to enable the exploration and development of the R source code. The project is currently under active development. Click on the button below followed by \"Create Codespace\" to create and enter your own web based containerised develoment environment. More details about GitHub codespaces can be found here . GitHub currently offers up to 60 hours for free on dual core codespaces. Run on your local computer The environment can be run locally on your computer. Running the environment requires you to have Docker, VSCode, and the VSCode Dev Containers extension installed. Upon opening a copy of the r-dev-env repository in VSCode you will be prompted to start the dev container. More information about Dev Containers can be found in the Microsoft Documentation . Project Background \u200bThe standard development process used by members of the R Core Team involves an iterative process of making changes to the source code, re-building R and exploring/testing the changes made. This process presents a big hurdle for new contributors to R, as setting up their system to build R can be non-trivial, requiring a lot of trouble-shooting, especially on Windows and macOS. On Linux and macOS, it is not straight-forward to work with different versions of R side-by-side and care needs to be taken not to corrupt or over-write the user's existing version of R/R packages. For these reasons, we propose to create containerized development environments for R. Our focus will be on creating a complete environment, including an IDE, that will provide a familiar space for R developers to work on contributions to base R.\u200b Contributors GSoC contributor: Atharva Shirdhankar Evaluating mentor: Heather Turner Mentor: James Tripp","title":"Home"},{"location":"#containerised-r-development-environment","text":"The containerized development environment for R is a Google Summer of Code 2023 project. Our aim is to provide a standard environment to enable the exploration and development of the R source code. The project is currently under active development. Click on the button below followed by \"Create Codespace\" to create and enter your own web based containerised develoment environment. More details about GitHub codespaces can be found here . GitHub currently offers up to 60 hours for free on dual core codespaces.","title":"Containerised R Development Environment"},{"location":"#run-on-your-local-computer","text":"The environment can be run locally on your computer. Running the environment requires you to have Docker, VSCode, and the VSCode Dev Containers extension installed. Upon opening a copy of the r-dev-env repository in VSCode you will be prompted to start the dev container. More information about Dev Containers can be found in the Microsoft Documentation .","title":"Run on your local computer"},{"location":"#project-background","text":"\u200bThe standard development process used by members of the R Core Team involves an iterative process of making changes to the source code, re-building R and exploring/testing the changes made. This process presents a big hurdle for new contributors to R, as setting up their system to build R can be non-trivial, requiring a lot of trouble-shooting, especially on Windows and macOS. On Linux and macOS, it is not straight-forward to work with different versions of R side-by-side and care needs to be taken not to corrupt or over-write the user's existing version of R/R packages. For these reasons, we propose to create containerized development environments for R. Our focus will be on creating a complete environment, including an IDE, that will provide a familiar space for R developers to work on contributions to base R.\u200b","title":"Project Background"},{"location":"#contributors","text":"GSoC contributor: Atharva Shirdhankar Evaluating mentor: Heather Turner Mentor: James Tripp","title":"Contributors"},{"location":"resources/","text":"Useful Resources Links: R in Visual Studio code VSCode R Wiki Getting started with Dev Containers Install Docker Desktop Installing Docker on Linux","title":"Resources"},{"location":"resources/#useful-resources-links","text":"R in Visual Studio code VSCode R Wiki Getting started with Dev Containers Install Docker Desktop Installing Docker on Linux","title":"Useful Resources Links:"},{"location":"tutorials/building_r/","text":"R Contribution Workflow Build Setup (Without Recommended Packages) 1) Environment Variables We have environment variables for setting the paths for building R and storing the source code. The path ENV variable for R Build and R Source code are BUILDDIR and TOP_SRCDIR respectively. The environment variables are set in the codespace image and are available when the codespace starts. 2) svn checkout The svn checkout cmd lets us create working of a repository with specific tag/branch. Example: svn checkout https://svn.r-project.org/R/trunk/ \"$TOP_SRCDIR\" Output : We get file structure something like this after checking out R source code from R svn repository. 3) Change Directory to BUILDDIR We need to change our directory to R build directory(BUILDDIR) to build and configure our R source code. First we will create a directory using env var BUILDDIR. mkdir -p $BUILDDIR Then we can change directory from root to $BUILDDIR one. cd $BUILDDIR 4) configure source code After we change directory to BUILDDIR we can configure and build R. Commands : \"$TOP_SRCDIR/configure\" --enable-R-shlib --without-recommended-packages make sudo make install The configure cmd prepares for building R, creating files and folders inside the BUILDDIR directory. Output : We get file structure something like this after using configure command. 5) Make Contributions After having built the current development version of R, we can now make changes to the source code and contribute to the project. Build Setup (With Recommended Packages) This build setup differs from the above because the recommended packages for R are included. 1. Checkout the R source using svn. bash svn checkout https://svn.r-project.org/R/trunk/ \"$TOP_SRCDIR\" 2. Create a directory using the environment variable called BUILDDIR. bash mkdir -p $BUILDDIR 3. Then we will install recommended packages using cmd bash \"$TOP_SRCDIR/tools/rsync-recommended\" 4. We can now change directory to $BUILDDIR using cmd bash cd $BUILLDIR 5. configure source code - After we change directory to BUILDDIR we can configure and build R. - CMD bash \"$TOP_SRCDIR/configure\" --enable-R-shlib make check make - The configure script sets options and settings for building R, creating files and folders inside the BUILDDIR directory. - After running the configure script the file structure of the build directory is something like the below. ![image](https://github.com/r-devel/r-dev-env/assets/72031540/0d4878fa-c1a8-462b-8365-76cc5dadf734)","title":"Building R"},{"location":"tutorials/building_r/#r-contribution-workflow","text":"","title":"R Contribution Workflow"},{"location":"tutorials/building_r/#build-setup-without-recommended-packages","text":"","title":"Build Setup (Without Recommended Packages)"},{"location":"tutorials/building_r/#1-environment-variables","text":"We have environment variables for setting the paths for building R and storing the source code. The path ENV variable for R Build and R Source code are BUILDDIR and TOP_SRCDIR respectively. The environment variables are set in the codespace image and are available when the codespace starts.","title":"1) Environment Variables"},{"location":"tutorials/building_r/#2-svn-checkout","text":"The svn checkout cmd lets us create working of a repository with specific tag/branch. Example: svn checkout https://svn.r-project.org/R/trunk/ \"$TOP_SRCDIR\" Output : We get file structure something like this after checking out R source code from R svn repository.","title":"2) svn checkout"},{"location":"tutorials/building_r/#3-change-directory-to-builddir","text":"We need to change our directory to R build directory(BUILDDIR) to build and configure our R source code. First we will create a directory using env var BUILDDIR. mkdir -p $BUILDDIR Then we can change directory from root to $BUILDDIR one. cd $BUILDDIR","title":"3) Change Directory to BUILDDIR"},{"location":"tutorials/building_r/#4-configure-source-code","text":"After we change directory to BUILDDIR we can configure and build R. Commands : \"$TOP_SRCDIR/configure\" --enable-R-shlib --without-recommended-packages make sudo make install The configure cmd prepares for building R, creating files and folders inside the BUILDDIR directory. Output : We get file structure something like this after using configure command.","title":"4) configure source code"},{"location":"tutorials/building_r/#5-make-contributions","text":"After having built the current development version of R, we can now make changes to the source code and contribute to the project.","title":"5) Make Contributions"},{"location":"tutorials/building_r/#build-setup-with-recommended-packages","text":"This build setup differs from the above because the recommended packages for R are included. 1. Checkout the R source using svn. bash svn checkout https://svn.r-project.org/R/trunk/ \"$TOP_SRCDIR\" 2. Create a directory using the environment variable called BUILDDIR. bash mkdir -p $BUILDDIR 3. Then we will install recommended packages using cmd bash \"$TOP_SRCDIR/tools/rsync-recommended\" 4. We can now change directory to $BUILDDIR using cmd bash cd $BUILLDIR 5. configure source code - After we change directory to BUILDDIR we can configure and build R. - CMD bash \"$TOP_SRCDIR/configure\" --enable-R-shlib make check make - The configure script sets options and settings for building R, creating files and folders inside the BUILDDIR directory. - After running the configure script the file structure of the build directory is something like the below. ![image](https://github.com/r-devel/r-dev-env/assets/72031540/0d4878fa-c1a8-462b-8365-76cc5dadf734)","title":"Build Setup (With Recommended Packages)"},{"location":"tutorials/codespacestartstop/","text":"Stopping and Restarting Codespaces How to Stop Codespaces? To stop codespaces we just need to navigate to the Codespaces option in the bottom left of the Codespace panel. After clicking on codespaces option we will get a drop down above something like this\ud83d\udc47 Click on \"Stop Current Codespace\". It will stop the codespaces you are currently using or running. You will be redirected to a Restart Codespaces page. The page shows a link to restart the codespace you just stopped. How to Restart Codespaces again? The code changes and operations we have performed inside the codespace will still be inside the stopped codespace. Also, the codespace may have an inactivity time limit and close after 30 minutes. If your codespace is stopped then you can restart it as shown below. Go to github.com/codespaces Here we can see a list of the codespaces we have created The screenshot shows we only have one stopped codespace To restart it, we can just click on the codespaces we wanted to use and it will start the codespaces again for us. You can also see an active label added to the codespaces we just started","title":"Restarting and Stopping"},{"location":"tutorials/codespacestartstop/#stopping-and-restarting-codespaces","text":"","title":"Stopping and Restarting Codespaces"},{"location":"tutorials/codespacestartstop/#how-to-stop-codespaces","text":"To stop codespaces we just need to navigate to the Codespaces option in the bottom left of the Codespace panel. After clicking on codespaces option we will get a drop down above something like this\ud83d\udc47 Click on \"Stop Current Codespace\". It will stop the codespaces you are currently using or running. You will be redirected to a Restart Codespaces page. The page shows a link to restart the codespace you just stopped.","title":"How to Stop Codespaces?"},{"location":"tutorials/codespacestartstop/#how-to-restart-codespaces-again","text":"The code changes and operations we have performed inside the codespace will still be inside the stopped codespace. Also, the codespace may have an inactivity time limit and close after 30 minutes. If your codespace is stopped then you can restart it as shown below. Go to github.com/codespaces Here we can see a list of the codespaces we have created The screenshot shows we only have one stopped codespace To restart it, we can just click on the codespaces we wanted to use and it will start the codespaces again for us. You can also see an active label added to the codespaces we just started","title":"How to Restart Codespaces again?"},{"location":"tutorials/contribution_workflow/","text":"Contribution Workflow 1. Example Contribution Workflow using DevContainer: To start working in R we will click on R:(not attach) option which is in the bottom right of our R-dev codespace. It will open R terminal for us. We can now run R commands. We will use the utils::askYesNo() function as an example > askYesNo(\"Is this a good example?\") Is this a good example? (Yes/no/cancel) Yes [1] TRUE 2. Editing Source Code Edit the source code of utils::askYesNo() to change the default options. The source code can be found in $TOP_SRCDIR/src/library/utils/R/askYesNo.R . > Before edit: prompts = getOption(\"askYesNo\", gettext(c(\"Yes\", \"No\", \"Cancel\"))), > With edit (for example - change to whatever you like!): prompts = getOption(\"askYesNo\", gettext(c(\"Oh yeah!\", \"Don't think so\", \"Cancel\"))), 3. Rebuilding Package Re-build the utils package (we only need to re-build the part we have modified). We can rebuild the package by following simple steps. First we need to be inside $BUILDDIR, for that we can change directory to cd $BUILDDIR . After that we can run cmd make and sudo make install in a series. This will re-build any parts of R that have changed, in this case only re-building the utils package, then re-install R. If we open a new R terminal we will see our changes getting reflected. 4. Cross check and Re-running Code Check the edit has worked as expected by re-running the example code: > askYesNo(\"Is this a good example?\") Is this a good example? (Oh yeah!/don't think so/cancel) Oh yeah! [1] TRUE","title":"R Contribution Workflow"},{"location":"tutorials/contribution_workflow/#contribution-workflow","text":"","title":"Contribution Workflow"},{"location":"tutorials/contribution_workflow/#1-example-contribution-workflow-using-devcontainer","text":"To start working in R we will click on R:(not attach) option which is in the bottom right of our R-dev codespace. It will open R terminal for us. We can now run R commands. We will use the utils::askYesNo() function as an example > askYesNo(\"Is this a good example?\") Is this a good example? (Yes/no/cancel) Yes [1] TRUE","title":"1. Example Contribution Workflow using DevContainer:"},{"location":"tutorials/contribution_workflow/#2-editing-source-code","text":"Edit the source code of utils::askYesNo() to change the default options. The source code can be found in $TOP_SRCDIR/src/library/utils/R/askYesNo.R .","title":"2. Editing Source Code"},{"location":"tutorials/contribution_workflow/#before-edit","text":"prompts = getOption(\"askYesNo\", gettext(c(\"Yes\", \"No\", \"Cancel\"))),","title":"&gt; Before edit:"},{"location":"tutorials/contribution_workflow/#with-edit-for-example-change-to-whatever-you-like","text":"prompts = getOption(\"askYesNo\", gettext(c(\"Oh yeah!\", \"Don't think so\", \"Cancel\"))),","title":"&gt; With edit (for example - change to whatever you like!):"},{"location":"tutorials/contribution_workflow/#3-rebuilding-package","text":"Re-build the utils package (we only need to re-build the part we have modified). We can rebuild the package by following simple steps. First we need to be inside $BUILDDIR, for that we can change directory to cd $BUILDDIR . After that we can run cmd make and sudo make install in a series. This will re-build any parts of R that have changed, in this case only re-building the utils package, then re-install R. If we open a new R terminal we will see our changes getting reflected.","title":"3. Rebuilding Package"},{"location":"tutorials/contribution_workflow/#4-cross-check-and-re-running-code","text":"Check the edit has worked as expected by re-running the example code: > askYesNo(\"Is this a good example?\") Is this a good example? (Oh yeah!/don't think so/cancel) Oh yeah! [1] TRUE","title":"4. Cross check and Re-running Code"},{"location":"tutorials/creating_codespace/","text":"Codespaces You will see the message \"Codespace usage for this repository is paid for by ...\", with your username. Don't panic! Note : Github Codespaces offers 120 core hours of free usage per month for every Github user. So the actual number of free hours is 120 divided by the number of cores you are using to run your codespaces. Here for the R-dev-env codespace we have set the codespace usage to 4 cores which leads to 30hrs of free usage per month. And it can also be changed according to your preference. For more details about codespaces billing, see the Codespaces Billing Docs . You can calculate your GitHub services usage with the GitHub Services Pricing Calculator and check your usage allowance under \"Codespaces\" here . 1) Click on the 'Open in GitHub Codespaces' button and then click the green 'Create Codespace' button. 2) The codespace setup screen will then be shown. Starting the container may take a minute or so. 3) You will be taken to a VSCode editor within your browser.","title":"Starting Codespace"},{"location":"tutorials/creating_codespace/#codespaces","text":"You will see the message \"Codespace usage for this repository is paid for by ...\", with your username. Don't panic! Note : Github Codespaces offers 120 core hours of free usage per month for every Github user. So the actual number of free hours is 120 divided by the number of cores you are using to run your codespaces. Here for the R-dev-env codespace we have set the codespace usage to 4 cores which leads to 30hrs of free usage per month. And it can also be changed according to your preference. For more details about codespaces billing, see the Codespaces Billing Docs . You can calculate your GitHub services usage with the GitHub Services Pricing Calculator and check your usage allowance under \"Codespaces\" here . 1) Click on the 'Open in GitHub Codespaces' button and then click the green 'Create Codespace' button. 2) The codespace setup screen will then be shown. Starting the container may take a minute or so. 3) You will be taken to a VSCode editor within your browser.","title":"Codespaces"},{"location":"tutorials/localsetup/","text":"Using Locally We can also use this codespace locally. For that we need to have some prerequisites installed. > Prerequisites : Docker Engine or Docker Desktop. You can find the docker desktop install instructions here . VSCode Editor. You can install VSCode from here . > Steps to run R Development Container locally : Head to the GitHub page for the R dev Github project link for R Development Container R-Dev-Env You can clone the repo or download the zip file. Downloading the zip file is recommeded since it has latest updates are pushed to it r-dev-env zip After downloading zip, unzip the file and change directory to r-dev-env . After the changing directory to r-dev-env, we can open this code inside VSCode editor using cmd code . . This will redirect us to VSCode editor. After this step please be sure that your docker engine is started. If you have installed Docker Desktop just open the Docker Desktop app the engine starts automatically and if you are using just docker engine make sure to start it with systemctl start docker cmd) We can see pop-up at the bottom right of the VSCode editor which says reopen in Dev Container. Click on 'Reopen in DevContainer' button. After clicking on that button we will see our container is getting ready. It will take some time. So till that time you can have coffee :) We can also test the dev container is working or not by just printing the env variables we have mentioned inside container. And there we go!!! We have setup our R-dev-env locally.","title":"Local Setup"},{"location":"tutorials/localsetup/#using-locally","text":"We can also use this codespace locally. For that we need to have some prerequisites installed.","title":"Using Locally"},{"location":"tutorials/localsetup/#prerequisites","text":"Docker Engine or Docker Desktop. You can find the docker desktop install instructions here . VSCode Editor. You can install VSCode from here .","title":"&gt; Prerequisites :"},{"location":"tutorials/localsetup/#steps-to-run-r-development-container-locally","text":"Head to the GitHub page for the R dev Github project link for R Development Container R-Dev-Env You can clone the repo or download the zip file. Downloading the zip file is recommeded since it has latest updates are pushed to it r-dev-env zip After downloading zip, unzip the file and change directory to r-dev-env . After the changing directory to r-dev-env, we can open this code inside VSCode editor using cmd code . . This will redirect us to VSCode editor. After this step please be sure that your docker engine is started. If you have installed Docker Desktop just open the Docker Desktop app the engine starts automatically and if you are using just docker engine make sure to start it with systemctl start docker cmd) We can see pop-up at the bottom right of the VSCode editor which says reopen in Dev Container. Click on 'Reopen in DevContainer' button. After clicking on that button we will see our container is getting ready. It will take some time. So till that time you can have coffee :) We can also test the dev container is working or not by just printing the env variables we have mentioned inside container. And there we go!!! We have setup our R-dev-env locally.","title":"&gt; Steps to run R Development Container locally :"},{"location":"tutorials/multi_r_compilation/","text":"Installing Multiple R versions To install multiple R versions inside a single codespace. 1) We have 2 env var path $BUILLDIR and $TOP_SRCDIR, we will leverage this var paths and build differeent R version inside it. 2) In basic contribution workflow we have seen for checking out R source code from svn we use command svn checkout https://svn.r-project.org/R/trunk/ \"$TOP_SRCDIR\" . But to able to install multiple R versions we need create sub-directory for different R versions. Let's say we are installing R-2.5.1 or R-devel version. We can create a sub directory for a specific version by using command. svn checkout https://svn.r-project.org/R/trunk/ \"$TOP_SRCDIR/r-devel\" The following command will checkout source code from svn into directory $TOP_SRCDIR/r-devel(TOP_SRCDIR = /workspaces/r-dev-env/svn/). 3) Now we need to build the R version using source code we just checkout. To do so we can use the $BUILDDIR env var. We have seen earlier that to create directory using the following env var we use command mkdir -p \"$BUILDDIR\" . To create a sub directory for our version we have svn checkout that is r-devel, we can use command mkdir -p \"$BUILDDIR/r-devel\" This will creates as a directory named as $BUILDDIR/r-devel(BUILDDOR = /workspaces/r-dev-env/build). 4) After creating the build directory for our r-devel branch. We can just change directory using cd command. cd \"$BUILDDIR/r-devel\" 5) Now we need to configure R build and we can configure using the command \"$TOP_SRCDIR/r-devel/configure\" --enable-R-shlib --without-recommended-packages 6) Finally, we can run make check and make command to build our R version. make check make Note : We can install different R versions using the following steps but whenever we checkout or build the R source code. Please be caution and use the proper directory naming. For example we have 3 versions \"4.2.4\", \"4.3\" and \"r-devel\" directories. To build r-devel we can only use \"$TOP_SRCDIR/r-devel\" and \"$BUILDDIR/r-devel\" directory path.","title":"Multiple R Version"},{"location":"tutorials/multi_r_compilation/#installing-multiple-r-versions","text":"To install multiple R versions inside a single codespace. 1) We have 2 env var path $BUILLDIR and $TOP_SRCDIR, we will leverage this var paths and build differeent R version inside it. 2) In basic contribution workflow we have seen for checking out R source code from svn we use command svn checkout https://svn.r-project.org/R/trunk/ \"$TOP_SRCDIR\" . But to able to install multiple R versions we need create sub-directory for different R versions. Let's say we are installing R-2.5.1 or R-devel version. We can create a sub directory for a specific version by using command. svn checkout https://svn.r-project.org/R/trunk/ \"$TOP_SRCDIR/r-devel\" The following command will checkout source code from svn into directory $TOP_SRCDIR/r-devel(TOP_SRCDIR = /workspaces/r-dev-env/svn/). 3) Now we need to build the R version using source code we just checkout. To do so we can use the $BUILDDIR env var. We have seen earlier that to create directory using the following env var we use command mkdir -p \"$BUILDDIR\" . To create a sub directory for our version we have svn checkout that is r-devel, we can use command mkdir -p \"$BUILDDIR/r-devel\" This will creates as a directory named as $BUILDDIR/r-devel(BUILDDOR = /workspaces/r-dev-env/build). 4) After creating the build directory for our r-devel branch. We can just change directory using cd command. cd \"$BUILDDIR/r-devel\" 5) Now we need to configure R build and we can configure using the command \"$TOP_SRCDIR/r-devel/configure\" --enable-R-shlib --without-recommended-packages 6) Finally, we can run make check and make command to build our R version. make check make Note : We can install different R versions using the following steps but whenever we checkout or build the R source code. Please be caution and use the proper directory naming. For example we have 3 versions \"4.2.4\", \"4.3\" and \"r-devel\" directories. To build r-devel we can only use \"$TOP_SRCDIR/r-devel\" and \"$BUILDDIR/r-devel\" directory path.","title":"Installing Multiple R versions"},{"location":"tutorials/patch_update/","text":"Creating a Patch File We can also create a patch file for the update and changes that we made to the source code. 1) Assuming we have made a change and we want to submit a patch. If necessary, update the version of R you are working on, with the latest changes in https://svn.r-project.org/R/trunk/ . E.g. if the version of R you are working on is named \"R-devel-working\" cd $TOP_SRCDIR/R-devel-working svn update cd $BUILDDIR/R-devel-working make # this will run the configure as before 2) Now run R's test suite to make sure that your change has not broken anything: make check 3) Then create a patch. The patch file will be saved inside the patchdir directory. cd \"$TOP_SRCDIR\" svn update svn diff > $PATCHDIR/patch.diff","title":"Creating a Patch File"},{"location":"tutorials/patch_update/#creating-a-patch-file","text":"We can also create a patch file for the update and changes that we made to the source code. 1) Assuming we have made a change and we want to submit a patch. If necessary, update the version of R you are working on, with the latest changes in https://svn.r-project.org/R/trunk/ . E.g. if the version of R you are working on is named \"R-devel-working\" cd $TOP_SRCDIR/R-devel-working svn update cd $BUILDDIR/R-devel-working make # this will run the configure as before 2) Now run R's test suite to make sure that your change has not broken anything: make check 3) Then create a patch. The patch file will be saved inside the patchdir directory. cd \"$TOP_SRCDIR\" svn update svn diff > $PATCHDIR/patch.diff","title":"Creating a Patch File"},{"location":"tutorials/running_r/","text":"Running R 1) Create a file in VS Code ending with a .R extension. You can create new files by clicking on the new file icon in VS Code. 2) Open the file by clicking on the filename. You should see R:(not attached) in the bottom bar. 3) Click on the R:(not attached) button to launch R in the terminal. You can then send code from the .R file to the R terminal by pressing cmd/ctrl + enter.","title":"Running R"},{"location":"tutorials/running_r/#running-r","text":"1) Create a file in VS Code ending with a .R extension. You can create new files by clicking on the new file icon in VS Code. 2) Open the file by clicking on the filename. You should see R:(not attached) in the bottom bar. 3) Click on the R:(not attached) button to launch R in the terminal. You can then send code from the .R file to the R terminal by pressing cmd/ctrl + enter.","title":"Running R"},{"location":"tutorials/update_source/","text":"Updating Source Code After following through the Contribution workflow and making the following changes, we need to update it inside the source code directory. To do so, first we need to follow this steps: 1) Change Directory to TOP_SRCDIR If you are currently inside the BUILDDIR directory or root directory(/workspaces/r-dev-env) make sure to change it to TOP_SRCDIR so that we can update the changes made inside our source code. cd $TOP_SRCDIR 2) Update using svn Now we want to update the source code for that we will use svn command update svn update 3) Check changes made using diff To cross check the changes we made in source code. We will use this command svn diff 4) Revert Changes(Optional step) In some cases, we might want to revert the changes we made. We can use the revert command To revert the changes made in specific file, we can use svn revert src/library/utils/R/askYesNo.R To revert changes in a directory svn revert src/lib/utils To revert all local changes svn revert -R . 5) Change Directory and Rebuild To rebuild the R version and reflect on the changes made, we want to change directory to BUILDDIR from TOP_SRCDIR cd $BUILDDIR 6) Rebuild the Source Code Now rebuild using make command make check make","title":"Updating Source Code"},{"location":"tutorials/update_source/#updating-source-code","text":"After following through the Contribution workflow and making the following changes, we need to update it inside the source code directory. To do so, first we need to follow this steps:","title":"Updating Source Code"},{"location":"tutorials/update_source/#1-change-directory-to-top_srcdir","text":"If you are currently inside the BUILDDIR directory or root directory(/workspaces/r-dev-env) make sure to change it to TOP_SRCDIR so that we can update the changes made inside our source code. cd $TOP_SRCDIR","title":"1) Change Directory to TOP_SRCDIR"},{"location":"tutorials/update_source/#2-update-using-svn","text":"Now we want to update the source code for that we will use svn command update svn update","title":"2) Update using svn"},{"location":"tutorials/update_source/#3-check-changes-made-using-diff","text":"To cross check the changes we made in source code. We will use this command svn diff","title":"3) Check changes made using diff"},{"location":"tutorials/update_source/#4-revert-changesoptional-step","text":"In some cases, we might want to revert the changes we made. We can use the revert command To revert the changes made in specific file, we can use svn revert src/library/utils/R/askYesNo.R To revert changes in a directory svn revert src/lib/utils To revert all local changes svn revert -R .","title":"4) Revert Changes(Optional step)"},{"location":"tutorials/update_source/#5-change-directory-and-rebuild","text":"To rebuild the R version and reflect on the changes made, we want to change directory to BUILDDIR from TOP_SRCDIR cd $BUILDDIR","title":"5) Change Directory and Rebuild"},{"location":"tutorials/update_source/#6-rebuild-the-source-code","text":"Now rebuild using make command make check make","title":"6) Rebuild the Source Code"}]}